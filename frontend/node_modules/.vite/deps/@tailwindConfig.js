import {
  __commonJS
} from "./chunk-DC5AMYBS.js";

// node_modules/tailwindcss/lib/util/createPlugin.js
var require_createPlugin = __commonJS({
  "node_modules/tailwindcss/lib/util/createPlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    function createPlugin(plugin, config) {
      return {
        handler: plugin,
        config
      };
    }
    createPlugin.withOptions = function(pluginFunction, configFunction = () => ({})) {
      const optionsFunction = function(options) {
        return {
          __options: options,
          handler: pluginFunction(options),
          config: configFunction(options)
        };
      };
      optionsFunction.__isOptionsFunction = true;
      optionsFunction.__pluginFunction = pluginFunction;
      optionsFunction.__configFunction = configFunction;
      return optionsFunction;
    };
    var _default = createPlugin;
  }
});

// node_modules/tailwindcss/lib/public/create-plugin.js
var require_create_plugin = __commonJS({
  "node_modules/tailwindcss/lib/public/create-plugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    var _createPlugin = _interop_require_default(require_createPlugin());
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var _default = _createPlugin.default;
  }
});

// node_modules/tailwindcss/plugin.js
var require_plugin = __commonJS({
  "node_modules/tailwindcss/plugin.js"(exports, module) {
    var createPlugin = require_create_plugin();
    module.exports = (createPlugin.__esModule ? createPlugin : { default: createPlugin }).default;
  }
});

// node_modules/tailwindcss/lib/util/flattenColorPalette.js
var require_flattenColorPalette = __commonJS({
  "node_modules/tailwindcss/lib/util/flattenColorPalette.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    var flattenColorPalette = (colors) => Object.assign({}, ...Object.entries(colors !== null && colors !== void 0 ? colors : {}).flatMap(([color, values]) => typeof values == "object" ? Object.entries(flattenColorPalette(values)).map(([number, hex]) => ({
      [color + (number === "DEFAULT" ? "" : `-${number}`)]: hex
    })) : [
      {
        [`${color}`]: values
      }
    ]));
    var _default = flattenColorPalette;
  }
});

// node_modules/tailwindcss/lib/util/toColorValue.js
var require_toColorValue = __commonJS({
  "node_modules/tailwindcss/lib/util/toColorValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return toColorValue;
      }
    });
    function toColorValue(maybeFunction) {
      return typeof maybeFunction === "function" ? maybeFunction({}) : maybeFunction;
    }
  }
});

// node_modules/tailwind-scrollbar/src/typedefs.js
var require_typedefs = __commonJS({
  "node_modules/tailwind-scrollbar/src/typedefs.js"(exports) {
    exports.unused = {};
  }
});

// node_modules/tailwind-scrollbar/src/helpers.js
var require_helpers = __commonJS({
  "node_modules/tailwind-scrollbar/src/helpers.js"(exports, module) {
    var importDefault = (mod) => mod && mod.__esModule ? mod.default : mod;
    module.exports = {
      importDefault
    };
  }
});

// node_modules/tailwind-scrollbar/src/utilities.js
var require_utilities = __commonJS({
  "node_modules/tailwind-scrollbar/src/utilities.js"(exports, module) {
    var flattenColorPaletteImport = require_flattenColorPalette();
    var toColorValueImport = require_toColorValue();
    var typedefs = require_typedefs();
    var { importDefault } = require_helpers();
    var flattenColorPalette = importDefault(flattenColorPaletteImport);
    var toColorValue = importDefault(toColorValueImport);
    var COMPONENTS = ["track", "thumb", "corner"];
    var scrollbarProperties = (properties, preferPseudoElements) => {
      if (preferPseudoElements) {
        return {
          "@supports (-moz-appearance:none)": properties
        };
      }
      return properties;
    };
    var addBaseStyles = ({ addBase }, preferredStrategy) => {
      addBase({
        "*": scrollbarProperties({
          "scrollbar-color": "initial",
          "scrollbar-width": "initial"
        }, preferredStrategy === "pseudoelements")
      });
    };
    var generateBaseUtilities = () => ({
      ...Object.fromEntries(COMPONENTS.map((component) => {
        const base = `&::-webkit-scrollbar-${component}`;
        return [
          [base, {
            "background-color": `var(--scrollbar-${component})`,
            "border-radius": `var(--scrollbar-${component}-radius)`
          }],
          [`${base}:hover`, {
            "background-color": `var(--scrollbar-${component}-hover, var(--scrollbar-${component}))`
          }],
          [`${base}:active`, {
            "background-color": `var(--scrollbar-${component}-active, var(--scrollbar-${component}-hover, var(--scrollbar-${component})))`
          }]
        ];
      }).flat())
    });
    var generateScrollbarSizeUtilities = ({ preferPseudoElements }) => ({
      ".scrollbar": {
        ...generateBaseUtilities(),
        ...scrollbarProperties({
          "scrollbar-width": "auto",
          "scrollbar-color": "var(--scrollbar-thumb, initial) var(--scrollbar-track, initial)"
        }, preferPseudoElements),
        "&::-webkit-scrollbar": {
          display: "block",
          width: "var(--scrollbar-width, 16px)",
          height: "var(--scrollbar-height, 16px)"
        }
      },
      ".scrollbar-thin": {
        ...generateBaseUtilities(),
        ...scrollbarProperties({
          "scrollbar-width": "thin",
          "scrollbar-color": "var(--scrollbar-thumb, initial) var(--scrollbar-track, initial)"
        }, preferPseudoElements),
        "&::-webkit-scrollbar": {
          display: "block",
          width: "8px",
          height: "8px"
        }
      },
      ".scrollbar-none": {
        ...scrollbarProperties({
          "scrollbar-width": "none"
        }, preferPseudoElements),
        "&::-webkit-scrollbar": {
          display: "none"
        }
      }
    });
    var addColorUtilities = ({ matchUtilities, theme }) => {
      const themeColors = flattenColorPalette(theme("colors"));
      const colors = Object.fromEntries(
        Object.entries(themeColors).map(([k, v]) => [k, toColorValue(v)])
      );
      COMPONENTS.forEach((component) => {
        matchUtilities(
          {
            [`scrollbar-${component}`]: (value) => {
              const color = toColorValue(value);
              return {
                [`--scrollbar-${component}`]: `${color} !important`
              };
            }
          },
          {
            values: colors,
            type: "color"
          }
        );
      });
    };
    var addRoundedUtilities = ({ theme, matchUtilities }) => {
      COMPONENTS.forEach((component) => {
        matchUtilities(
          {
            [`scrollbar-${component}-rounded`]: (value) => ({
              [`--scrollbar-${component}-radius`]: value
            })
          },
          {
            values: theme("borderRadius")
          }
        );
      });
    };
    var addBaseSizeUtilities = ({ addUtilities }, preferredStrategy) => {
      addUtilities(generateScrollbarSizeUtilities({
        preferPseudoElements: preferredStrategy === "pseudoelements"
      }));
    };
    var addSizeUtilities = ({ matchUtilities, theme }) => {
      ["width", "height"].forEach((dimension) => {
        matchUtilities({
          [`scrollbar-${dimension[0]}`]: (value) => ({
            [`--scrollbar-${dimension}`]: value
          })
        }, {
          values: theme(dimension)
        });
      });
    };
    module.exports = {
      addBaseStyles,
      addBaseSizeUtilities,
      addColorUtilities,
      addRoundedUtilities,
      addSizeUtilities
    };
  }
});

// node_modules/picocolors/picocolors.browser.js
var require_picocolors_browser = __commonJS({
  "node_modules/picocolors/picocolors.browser.js"(exports, module) {
    var x = String;
    var create = function() {
      return { isColorSupported: false, reset: x, bold: x, dim: x, italic: x, underline: x, inverse: x, hidden: x, strikethrough: x, black: x, red: x, green: x, yellow: x, blue: x, magenta: x, cyan: x, white: x, gray: x, bgBlack: x, bgRed: x, bgGreen: x, bgYellow: x, bgBlue: x, bgMagenta: x, bgCyan: x, bgWhite: x, blackBright: x, redBright: x, greenBright: x, yellowBright: x, blueBright: x, magentaBright: x, cyanBright: x, whiteBright: x, bgBlackBright: x, bgRedBright: x, bgGreenBright: x, bgYellowBright: x, bgBlueBright: x, bgMagentaBright: x, bgCyanBright: x, bgWhiteBright: x };
    };
    module.exports = create();
    module.exports.createColors = create;
  }
});

// node_modules/tailwindcss/lib/util/log.js
var require_log = __commonJS({
  "node_modules/tailwindcss/lib/util/log.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      dim: function() {
        return dim;
      },
      default: function() {
        return _default;
      }
    });
    var _picocolors = _interop_require_default(require_picocolors_browser());
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var alreadyShown = /* @__PURE__ */ new Set();
    function log(type, messages, key) {
      if (typeof process !== "undefined" && process.env.JEST_WORKER_ID) return;
      if (key && alreadyShown.has(key)) return;
      if (key) alreadyShown.add(key);
      console.warn("");
      messages.forEach((message) => console.warn(type, "-", message));
    }
    function dim(input) {
      return _picocolors.default.dim(input);
    }
    var _default = {
      info(key, messages) {
        log(_picocolors.default.bold(_picocolors.default.cyan("info")), ...Array.isArray(key) ? [
          key
        ] : [
          messages,
          key
        ]);
      },
      warn(key, messages) {
        log(_picocolors.default.bold(_picocolors.default.yellow("warn")), ...Array.isArray(key) ? [
          key
        ] : [
          messages,
          key
        ]);
      },
      risk(key, messages) {
        log(_picocolors.default.bold(_picocolors.default.magenta("risk")), ...Array.isArray(key) ? [
          key
        ] : [
          messages,
          key
        ]);
      }
    };
  }
});

// node_modules/tailwindcss/lib/featureFlags.js
var require_featureFlags = __commonJS({
  "node_modules/tailwindcss/lib/featureFlags.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      flagEnabled: function() {
        return flagEnabled;
      },
      issueFlagNotices: function() {
        return issueFlagNotices;
      },
      default: function() {
        return _default;
      }
    });
    var _picocolors = _interop_require_default(require_picocolors_browser());
    var _log = _interop_require_default(require_log());
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var defaults = {
      optimizeUniversalDefaults: false,
      generalizedModifiers: true,
      disableColorOpacityUtilitiesByDefault: false,
      relativeContentPathsByDefault: false
    };
    var featureFlags = {
      future: [
        "hoverOnlyWhenSupported",
        "respectDefaultRingColorOpacity",
        "disableColorOpacityUtilitiesByDefault",
        "relativeContentPathsByDefault"
      ],
      experimental: [
        "optimizeUniversalDefaults",
        "generalizedModifiers"
      ]
    };
    function flagEnabled(config, flag) {
      if (featureFlags.future.includes(flag)) {
        var _config_future;
        var _config_future_flag, _ref;
        return config.future === "all" || ((_ref = (_config_future_flag = config === null || config === void 0 ? void 0 : (_config_future = config.future) === null || _config_future === void 0 ? void 0 : _config_future[flag]) !== null && _config_future_flag !== void 0 ? _config_future_flag : defaults[flag]) !== null && _ref !== void 0 ? _ref : false);
      }
      if (featureFlags.experimental.includes(flag)) {
        var _config_experimental;
        var _config_experimental_flag, _ref1;
        return config.experimental === "all" || ((_ref1 = (_config_experimental_flag = config === null || config === void 0 ? void 0 : (_config_experimental = config.experimental) === null || _config_experimental === void 0 ? void 0 : _config_experimental[flag]) !== null && _config_experimental_flag !== void 0 ? _config_experimental_flag : defaults[flag]) !== null && _ref1 !== void 0 ? _ref1 : false);
      }
      return false;
    }
    function experimentalFlagsEnabled(config) {
      if (config.experimental === "all") {
        return featureFlags.experimental;
      }
      var _config_experimental;
      return Object.keys((_config_experimental = config === null || config === void 0 ? void 0 : config.experimental) !== null && _config_experimental !== void 0 ? _config_experimental : {}).filter((flag) => featureFlags.experimental.includes(flag) && config.experimental[flag]);
    }
    function issueFlagNotices(config) {
      if (process.env.JEST_WORKER_ID !== void 0) {
        return;
      }
      if (experimentalFlagsEnabled(config).length > 0) {
        let changes = experimentalFlagsEnabled(config).map((s) => _picocolors.default.yellow(s)).join(", ");
        _log.default.warn("experimental-flags-enabled", [
          `You have enabled experimental features: ${changes}`,
          "Experimental features in Tailwind CSS are not covered by semver, may introduce breaking changes, and can change at any time."
        ]);
      }
    }
    var _default = featureFlags;
  }
});

// node_modules/tailwind-scrollbar/src/variants.js
var require_variants = __commonJS({
  "node_modules/tailwind-scrollbar/src/variants.js"(exports, module) {
    var { flagEnabled } = require_featureFlags();
    var typedefs = require_typedefs();
    var variants = [
      "hover",
      "focus",
      "focus-visible",
      "active",
      "enabled",
      "disabled"
    ];
    var getDefaultFormat = (variant, config) => {
      if (variant === "hover" && flagEnabled && flagEnabled(config(), "hoverOnlyWhenSupported")) {
        return "@media (hover: hover) and (pointer: fine) { &:hover }";
      }
      return `&:${variant}`;
    };
    var getScrollbarFormat = (variant, config) => {
      if (variant === "hover" && flagEnabled && flagEnabled(config(), "hoverOnlyWhenSupported")) {
        return "@media (hover: hover) and (pointer: fine) { & }";
      }
      return "&";
    };
    var addVariantOverrides = ({ addVariant, config }) => {
      variants.forEach((variant) => {
        addVariant(variant, ({ container }) => {
          const suffix = `-${variant}`;
          let found = false;
          container.walkRules((rule) => {
            rule.walkDecls(/^--scrollbar-/, (decl) => {
              found = true;
              if (!decl.prop.endsWith(suffix)) {
                decl.prop += suffix;
              }
            });
          });
          if (found) {
            return getScrollbarFormat(variant, config);
          }
          return getDefaultFormat(variant, config);
        });
      });
    };
    module.exports = {
      addVariantOverrides
    };
  }
});

// node_modules/tailwind-scrollbar/src/index.js
var require_src = __commonJS({
  "node_modules/tailwind-scrollbar/src/index.js"(exports, module) {
    var plugin = require_plugin();
    var {
      addBaseStyles,
      addBaseSizeUtilities,
      addColorUtilities,
      addRoundedUtilities,
      addSizeUtilities
    } = require_utilities();
    var { addVariantOverrides } = require_variants();
    module.exports = plugin.withOptions((options = {}) => (tailwind) => {
      let preferredStrategy = options.preferredStrategy ?? "standard";
      if (preferredStrategy !== "standard" && preferredStrategy !== "pseudoelements") {
        console.warn("WARNING: tailwind-scrollbar preferredStrategy should be 'standard' or 'pseudoelements'");
        preferredStrategy = "standard";
      }
      addBaseStyles(tailwind, preferredStrategy);
      addBaseSizeUtilities(tailwind, preferredStrategy);
      addColorUtilities(tailwind);
      addVariantOverrides(tailwind);
      if (options.nocompatible) {
        addRoundedUtilities(tailwind);
        addSizeUtilities(tailwind);
      }
    });
  }
});

// tailwind.config.js
var tailwind_config_default = {
  content: ["index.html", "./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {
      fontFamily: {
        Roboto: "Roboto"
      }
    }
  },
  plugins: [require_src()]
};
export {
  tailwind_config_default as default
};
//# sourceMappingURL=@tailwindConfig.js.map
